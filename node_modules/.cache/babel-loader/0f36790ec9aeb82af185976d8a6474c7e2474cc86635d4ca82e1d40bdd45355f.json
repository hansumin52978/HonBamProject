{"ast":null,"code":"// 로그인 한 유저의 데이터 객체를 반환하는 함수\nexport const getLoginUserInfo = () => {\n  return {\n    token: localStorage.getItem('ACCESS_TOKEN'),\n    username: localStorage.getItem('LOGIN_USERNAME'),\n    role: localStorage.getItem('USER_ROLE')\n  };\n};\n\n// 로그인 여부를 확인하는 함수\n// const isLogin = () => {\n//   const token = localStorage.getItem('ACCESS_TOKEN');\n//   if (token === null) return false;\n//   return true;\n// };\n\n// 특정 값이나 메서드의 리턴값을 논리 타입으로 변환하고 할 때 !!를 붙입니다.\n// localStorage.getItem의 결과를 논리타입으로 리턴 -> 값이 있으면 true, null이면 false로 리턴.\nexport const isLogin = () => !!localStorage.getItem('ACCESS_TOKEN');","map":{"version":3,"names":["getLoginUserInfo","token","localStorage","getItem","username","role","isLogin"],"sources":["C:/MyWork/HonBamProject/src/util/login-util.js"],"sourcesContent":["// 로그인 한 유저의 데이터 객체를 반환하는 함수\r\nexport const getLoginUserInfo = () => {\r\n  return {\r\n    token: localStorage.getItem('ACCESS_TOKEN'),\r\n    username: localStorage.getItem('LOGIN_USERNAME'),\r\n    role: localStorage.getItem('USER_ROLE'),\r\n  };\r\n};\r\n\r\n// 로그인 여부를 확인하는 함수\r\n// const isLogin = () => {\r\n//   const token = localStorage.getItem('ACCESS_TOKEN');\r\n//   if (token === null) return false;\r\n//   return true;\r\n// };\r\n\r\n// 특정 값이나 메서드의 리턴값을 논리 타입으로 변환하고 할 때 !!를 붙입니다.\r\n// localStorage.getItem의 결과를 논리타입으로 리턴 -> 값이 있으면 true, null이면 false로 리턴.\r\nexport const isLogin = () => !!localStorage.getItem('ACCESS_TOKEN');\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAO;IACLC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC3CC,QAAQ,EAAEF,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAChDE,IAAI,EAAEH,YAAY,CAACC,OAAO,CAAC,WAAW;EACxC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,MAAMG,OAAO,GAAGA,CAAA,KAAM,CAAC,CAACJ,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}