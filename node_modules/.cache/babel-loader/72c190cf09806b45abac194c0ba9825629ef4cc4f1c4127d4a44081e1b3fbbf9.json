{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyWork\\\\HonBamProject\\\\src\\\\util\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// 새로운 전역 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  // 로그인 했는지의 여부 추적\n  userName: '',\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\n\n// 위에서 생성한 Context를 제공할 수 있는 provider\n// 이 컴포넌트를 통해 자식 컴포넌트에게 인증 상태와 관련된 함수들을 전달할 수 있음.\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState('');\n\n  // 컴포넌트가 렌더링 될 때 localStorage에서 로그인 정보를 가지고 와서 상태를 설정.\n  useEffect(() => {\n    if (localStorage.getItem('isLoggedIn') === '1') {\n      setIsLoggedIn(true);\n      setUserName(localStorage.getItem('LOGIN_USERNAME'));\n    }\n  }, []);\n\n  //로그아웃 핸들러\n  const logoutHandler = () => {\n    localStorage.clear(); //로컬스토리지 내용 전체 삭제\n    setIsLoggedIn(false);\n    setUserName('');\n  };\n\n  // 로그인 핸들러\n  const loginHandler = (token, userName, role) => {\n    localStorage.setItem('isLoggedIn', '1');\n    //json에 담긴 인증정보를 클라이언트에 보관\n    // 1. 로컬 스토리지 - 브라우저가 종료되어도 보관됨.\n    // 2. 세션 스토리지 - 브라우저가 종료되면 사라짐.\n    localStorage.setItem('ACCESS_TOKEN', token);\n    localStorage.setItem('LOGIN_USERNAME', userName);\n    localStorage.setItem('USER_ROLE', role);\n    setIsLoggedIn(true);\n    setUserName(userName);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userName,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"h8BT9GgJ1pMUFMRN15rglie0p6g=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","createContext","isLoggedIn","userName","onLogout","onLogin","email","password","AuthContextProvider","props","_s","setIsLoggedIn","setUserName","localStorage","getItem","logoutHandler","clear","loginHandler","token","role","setItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MyWork/HonBamProject/src/util/AuthContext.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// 새로운 전역 컨텍스트 생성\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false, // 로그인 했는지의 여부 추적\r\n  userName: '',\r\n  onLogout: () => {},\r\n  onLogin: (email, password) => {},\r\n});\r\n\r\n// 위에서 생성한 Context를 제공할 수 있는 provider\r\n// 이 컴포넌트를 통해 자식 컴포넌트에게 인증 상태와 관련된 함수들을 전달할 수 있음.\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n\r\n  // 컴포넌트가 렌더링 될 때 localStorage에서 로그인 정보를 가지고 와서 상태를 설정.\r\n  useEffect(() => {\r\n    if (localStorage.getItem('isLoggedIn') === '1') {\r\n      setIsLoggedIn(true);\r\n      setUserName(localStorage.getItem('LOGIN_USERNAME'));\r\n    }\r\n  }, []);\r\n\r\n  //로그아웃 핸들러\r\n  const logoutHandler = () => {\r\n    localStorage.clear(); //로컬스토리지 내용 전체 삭제\r\n    setIsLoggedIn(false);\r\n    setUserName('');\r\n  };\r\n\r\n  // 로그인 핸들러\r\n  const loginHandler = (token, userName, role) => {\r\n    localStorage.setItem('isLoggedIn', '1');\r\n    //json에 담긴 인증정보를 클라이언트에 보관\r\n    // 1. 로컬 스토리지 - 브라우저가 종료되어도 보관됨.\r\n    // 2. 세션 스토리지 - 브라우저가 종료되면 사라짐.\r\n    localStorage.setItem('ACCESS_TOKEN', token);\r\n    localStorage.setItem('LOGIN_USERNAME', userName);\r\n    localStorage.setItem('USER_ROLE', role);\r\n    setIsLoggedIn(true);\r\n    setUserName(userName);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn,\r\n        userName,\r\n        onLogout: logoutHandler,\r\n        onLogin: loginHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EAAE;EACnBC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAEA,CAAA,KAAM,CAAC,CAAC;EAClBC,OAAO,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAC;AACjC,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5C,MAAM,CAACR,UAAU,EAAES,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACM,QAAQ,EAAES,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACd,IAAIiB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE;MAC9CH,aAAa,CAAC,IAAI,CAAC;MACnBC,WAAW,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACrD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BF,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;IACtBL,aAAa,CAAC,KAAK,CAAC;IACpBC,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC;;EAED;EACA,MAAMK,YAAY,GAAGA,CAACC,KAAK,EAAEf,QAAQ,EAAEgB,IAAI,KAAK;IAC9CN,YAAY,CAACO,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvC;IACA;IACA;IACAP,YAAY,CAACO,OAAO,CAAC,cAAc,EAAEF,KAAK,CAAC;IAC3CL,YAAY,CAACO,OAAO,CAAC,gBAAgB,EAAEjB,QAAQ,CAAC;IAChDU,YAAY,CAACO,OAAO,CAAC,WAAW,EAAED,IAAI,CAAC;IACvCR,aAAa,CAAC,IAAI,CAAC;IACnBC,WAAW,CAACT,QAAQ,CAAC;EACvB,CAAC;EAED,oBACEJ,OAAA,CAACC,WAAW,CAACqB,QAAQ;IACnBC,KAAK,EAAE;MACLpB,UAAU;MACVC,QAAQ;MACRC,QAAQ,EAAEW,aAAa;MACvBV,OAAO,EAAEY;IACX,CAAE;IAAAM,QAAA,EAEDd,KAAK,CAACc;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAACjB,EAAA,CA5CWF,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AA8ChC,eAAeR,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}